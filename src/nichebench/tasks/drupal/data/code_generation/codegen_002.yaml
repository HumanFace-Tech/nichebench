id: drupal_code_002
context: |
  Project: "ColorBadges"
  Stack:
    - Drupal: 11.1.x (upgrade to 11.2.x planned)
    - PHP: 8.2
    - DB: PostgreSQL 16 in all envs
  Editorial feature:
    - A "Badge" content entity requires a first-class Color value (R,G,B) with strict validation and field UI.
    - Color must be modeled as Typed Data (not arbitrary arrays), and exposed via Field API (type + widget + formatter).
  Accessibility & DX:
    - Formatter output must include an accessible label and avoid unsafe inline SVG/HTML
    - JSON endpoint should expose the color as r,g,b and hex (#RRGGBB)
  Repo hints:
    - No existing custom module; create one under web/modules/custom/color_badges
  Acceptance notes:
    - Entity has canonical, add/edit/delete routes; basic permissions; appears in admin listings
    - A Views display or Views data integration exists so editors can list badges
summary: Build a content entity "Badge" plus a Typed Dataâ€“backed Color field type with widget/formatter and a small JSON endpoint.
prompt: |
  Implement a module that provides:
    - A "badge" content entity with label + machine ID, CRUD forms, access control, and admin listing
    - A custom Field Type 'color_rgb' storing three integer channels (0..255) with proper schema
    - A Widget that accepts "R,G,B" text and validates input; a Formatter that renders a swatch and readable text
    - A JSON controller route exposing a badge's color {r,g,b,hex}
    - Reasonable cacheability on formatter output and JSON responses
    - Automated tests (Kernel for Typed Data/field constraints; Functional for CRUD + rendering)
judge_checklist:
  - "Defines a Typed Data spec for Color (R,G,B) with Range constraints; integrates with the field type"
  - "Custom FieldType plugin class (annotation, schema, property definitions) stores three integers with constraints"
  - "Custom Widget plugin parses and validates 'R,G,B' input, sets form element #element_validate and error messages"
  - "Custom Formatter plugin renders accessible output (text label/aria) and sanitizes any markup; no raw HTML injection"
  - "Content entity class with proper handlers (access control, list builder, forms) and storage schema"
  - "Routing for canonical/add/edit/delete/collection wired; links and permissions defined"
  - "JSON controller returns normalized data {r,g,b,hex} with appropriate response headers and cacheability metadata"
  - "Views integration present (either Views data or a shipped View in config/install) to list badges"
  - "Configuration schema for any settings; defaults shipped in config/install when applicable"
  - "Kernel test validates Typed Data constraints and field storage; Functional test covers CRUD + formatter rendering"
  - "DI best practices (constructor injection), strict types, code style, and docblocks across plugins/entities"
